// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megslam_proto_keyframe.proto

#ifndef PROTOBUF_megslam_5fproto_5fkeyframe_2eproto__INCLUDED
#define PROTOBUF_megslam_5fproto_5fkeyframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace megslam {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

class Database;
class KeyFrame;
class MatX8u;
class MatXd;
class MatXf;
class MatXi;
class Point2f;
class Point3f;
class PointCloud;

// ===================================================================

class Point2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.Point2f) */ {
 public:
  Point2f();
  virtual ~Point2f();

  Point2f(const Point2f& from);

  inline Point2f& operator=(const Point2f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2f& default_instance();

  void Swap(Point2f* other);

  // implements Message ----------------------------------------------

  inline Point2f* New() const { return New(NULL); }

  Point2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2f& from);
  void MergeFrom(const Point2f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:megslam.proto.Point2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static Point2f* default_instance_;
};
// -------------------------------------------------------------------

class Point3f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.Point3f) */ {
 public:
  Point3f();
  virtual ~Point3f();

  Point3f(const Point3f& from);

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3f& default_instance();

  void Swap(Point3f* other);

  // implements Message ----------------------------------------------

  inline Point3f* New() const { return New(NULL); }

  Point3f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point3f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:megslam.proto.Point3f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static Point3f* default_instance_;
};
// -------------------------------------------------------------------

class MatXi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.MatXi) */ {
 public:
  MatXi();
  virtual ~MatXi();

  MatXi(const MatXi& from);

  inline MatXi& operator=(const MatXi& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatXi& default_instance();

  void Swap(MatXi* other);

  // implements Message ----------------------------------------------

  inline MatXi* New() const { return New(NULL); }

  MatXi* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatXi& from);
  void MergeFrom(const MatXi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatXi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // repeated int32 data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:megslam.proto.MatXi)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static MatXi* default_instance_;
};
// -------------------------------------------------------------------

class MatX8u : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.MatX8u) */ {
 public:
  MatX8u();
  virtual ~MatX8u();

  MatX8u(const MatX8u& from);

  inline MatX8u& operator=(const MatX8u& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatX8u& default_instance();

  void Swap(MatX8u* other);

  // implements Message ----------------------------------------------

  inline MatX8u* New() const { return New(NULL); }

  MatX8u* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatX8u& from);
  void MergeFrom(const MatX8u& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatX8u* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // repeated int32 data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:megslam.proto.MatX8u)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static MatX8u* default_instance_;
};
// -------------------------------------------------------------------

class MatXd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.MatXd) */ {
 public:
  MatXd();
  virtual ~MatXd();

  MatXd(const MatXd& from);

  inline MatXd& operator=(const MatXd& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatXd& default_instance();

  void Swap(MatXd* other);

  // implements Message ----------------------------------------------

  inline MatXd* New() const { return New(NULL); }

  MatXd* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatXd& from);
  void MergeFrom(const MatXd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatXd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // repeated double data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:megslam.proto.MatXd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static MatXd* default_instance_;
};
// -------------------------------------------------------------------

class MatXf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.MatXf) */ {
 public:
  MatXf();
  virtual ~MatXf();

  MatXf(const MatXf& from);

  inline MatXf& operator=(const MatXf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatXf& default_instance();

  void Swap(MatXf* other);

  // implements Message ----------------------------------------------

  inline MatXf* New() const { return New(NULL); }

  MatXf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatXf& from);
  void MergeFrom(const MatXf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatXf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // repeated float data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:megslam.proto.MatXf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static MatXf* default_instance_;
};
// -------------------------------------------------------------------

class KeyFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.KeyFrame) */ {
 public:
  KeyFrame();
  virtual ~KeyFrame();

  KeyFrame(const KeyFrame& from);

  inline KeyFrame& operator=(const KeyFrame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyFrame& default_instance();

  void Swap(KeyFrame* other);

  // implements Message ----------------------------------------------

  inline KeyFrame* New() const { return New(NULL); }

  KeyFrame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyFrame& from);
  void MergeFrom(const KeyFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .megslam.proto.MatXd Tcw = 2;
  bool has_tcw() const;
  void clear_tcw();
  static const int kTcwFieldNumber = 2;
  const ::megslam::proto::MatXd& tcw() const;
  ::megslam::proto::MatXd* mutable_tcw();
  ::megslam::proto::MatXd* release_tcw();
  void set_allocated_tcw(::megslam::proto::MatXd* tcw);

  // repeated .megslam.proto.Point2f key_points = 3;
  int key_points_size() const;
  void clear_key_points();
  static const int kKeyPointsFieldNumber = 3;
  const ::megslam::proto::Point2f& key_points(int index) const;
  ::megslam::proto::Point2f* mutable_key_points(int index);
  ::megslam::proto::Point2f* add_key_points();
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f >*
      mutable_key_points();
  const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f >&
      key_points() const;

  // optional .megslam.proto.MatXf local_descriptors = 4;
  bool has_local_descriptors() const;
  void clear_local_descriptors();
  static const int kLocalDescriptorsFieldNumber = 4;
  const ::megslam::proto::MatXf& local_descriptors() const;
  ::megslam::proto::MatXf* mutable_local_descriptors();
  ::megslam::proto::MatXf* release_local_descriptors();
  void set_allocated_local_descriptors(::megslam::proto::MatXf* local_descriptors);

  // repeated .megslam.proto.Point3f map_points = 5;
  int map_points_size() const;
  void clear_map_points();
  static const int kMapPointsFieldNumber = 5;
  const ::megslam::proto::Point3f& map_points(int index) const;
  ::megslam::proto::Point3f* mutable_map_points(int index);
  ::megslam::proto::Point3f* add_map_points();
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >*
      mutable_map_points();
  const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >&
      map_points() const;

  // optional .megslam.proto.MatXf global_descriptor = 6;
  bool has_global_descriptor() const;
  void clear_global_descriptor();
  static const int kGlobalDescriptorFieldNumber = 6;
  const ::megslam::proto::MatXf& global_descriptor() const;
  ::megslam::proto::MatXf* mutable_global_descriptor();
  ::megslam::proto::MatXf* release_global_descriptor();
  void set_allocated_global_descriptor(::megslam::proto::MatXf* global_descriptor);

  // optional .megslam.proto.MatXi encoded_local_descriptors = 7;
  bool has_encoded_local_descriptors() const;
  void clear_encoded_local_descriptors();
  static const int kEncodedLocalDescriptorsFieldNumber = 7;
  const ::megslam::proto::MatXi& encoded_local_descriptors() const;
  ::megslam::proto::MatXi* mutable_encoded_local_descriptors();
  ::megslam::proto::MatXi* release_encoded_local_descriptors();
  void set_allocated_encoded_local_descriptors(::megslam::proto::MatXi* encoded_local_descriptors);

  // repeated int32 map_point_ids = 8;
  int map_point_ids_size() const;
  void clear_map_point_ids();
  static const int kMapPointIdsFieldNumber = 8;
  ::google::protobuf::int32 map_point_ids(int index) const;
  void set_map_point_ids(int index, ::google::protobuf::int32 value);
  void add_map_point_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      map_point_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_map_point_ids();

  // @@protoc_insertion_point(class_scope:megslam.proto.KeyFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::megslam::proto::MatXd* tcw_;
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f > key_points_;
  ::megslam::proto::MatXf* local_descriptors_;
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f > map_points_;
  ::megslam::proto::MatXf* global_descriptor_;
  ::megslam::proto::MatXi* encoded_local_descriptors_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > map_point_ids_;
  mutable int _map_point_ids_cached_byte_size_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static KeyFrame* default_instance_;
};
// -------------------------------------------------------------------

class Database : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.Database) */ {
 public:
  Database();
  virtual ~Database();

  Database(const Database& from);

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Database& default_instance();

  void Swap(Database* other);

  // implements Message ----------------------------------------------

  inline Database* New() const { return New(NULL); }

  Database* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Database* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .megslam.proto.KeyFrame keyframes = 1;
  int keyframes_size() const;
  void clear_keyframes();
  static const int kKeyframesFieldNumber = 1;
  const ::megslam::proto::KeyFrame& keyframes(int index) const;
  ::megslam::proto::KeyFrame* mutable_keyframes(int index);
  ::megslam::proto::KeyFrame* add_keyframes();
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame >*
      mutable_keyframes();
  const ::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame >&
      keyframes() const;

  // @@protoc_insertion_point(class_scope:megslam.proto.Database)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame > keyframes_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static Database* default_instance_;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:megslam.proto.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();

  void Swap(PointCloud* other);

  // implements Message ----------------------------------------------

  inline PointCloud* New() const { return New(NULL); }

  PointCloud* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloud* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .megslam.proto.Point3f map_points = 1;
  int map_points_size() const;
  void clear_map_points();
  static const int kMapPointsFieldNumber = 1;
  const ::megslam::proto::Point3f& map_points(int index) const;
  ::megslam::proto::Point3f* mutable_map_points(int index);
  ::megslam::proto::Point3f* add_map_points();
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >*
      mutable_map_points();
  const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >&
      map_points() const;

  // repeated .megslam.proto.MatXf descriptors = 2;
  int descriptors_size() const;
  void clear_descriptors();
  static const int kDescriptorsFieldNumber = 2;
  const ::megslam::proto::MatXf& descriptors(int index) const;
  ::megslam::proto::MatXf* mutable_descriptors(int index);
  ::megslam::proto::MatXf* add_descriptors();
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf >*
      mutable_descriptors();
  const ::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf >&
      descriptors() const;

  // repeated float reprojection_errors = 3;
  int reprojection_errors_size() const;
  void clear_reprojection_errors();
  static const int kReprojectionErrorsFieldNumber = 3;
  float reprojection_errors(int index) const;
  void set_reprojection_errors(int index, float value);
  void add_reprojection_errors(float value);
  const ::google::protobuf::RepeatedField< float >&
      reprojection_errors() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_reprojection_errors();

  // @@protoc_insertion_point(class_scope:megslam.proto.PointCloud)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f > map_points_;
  ::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf > descriptors_;
  ::google::protobuf::RepeatedField< float > reprojection_errors_;
  mutable int _reprojection_errors_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto();
  friend void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto();

  void InitAsDefaultInstance();
  static PointCloud* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2f

// optional float x = 1;
inline void Point2f::clear_x() {
  x_ = 0;
}
inline float Point2f::x() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point2f.x)
  return x_;
}
inline void Point2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point2f.x)
}

// optional float y = 2;
inline void Point2f::clear_y() {
  y_ = 0;
}
inline float Point2f::y() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point2f.y)
  return y_;
}
inline void Point2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point2f.y)
}

// -------------------------------------------------------------------

// Point3f

// optional float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point3f.x)
  return x_;
}
inline void Point3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point3f.x)
}

// optional float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point3f.y)
  return y_;
}
inline void Point3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point3f.y)
}

// optional float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point3f.z)
  return z_;
}
inline void Point3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point3f.z)
}

// -------------------------------------------------------------------

// MatXi

// optional int32 rows = 1;
inline void MatXi::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 MatXi::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXi.rows)
  return rows_;
}
inline void MatXi::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXi.rows)
}

// optional int32 cols = 2;
inline void MatXi::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 MatXi::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXi.cols)
  return cols_;
}
inline void MatXi::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXi.cols)
}

// repeated int32 data = 3;
inline int MatXi::data_size() const {
  return data_.size();
}
inline void MatXi::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 MatXi::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXi.data)
  return data_.Get(index);
}
inline void MatXi::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatXi.data)
}
inline void MatXi::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatXi.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MatXi::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatXi.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MatXi::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatXi.data)
  return &data_;
}

// -------------------------------------------------------------------

// MatX8u

// optional int32 rows = 1;
inline void MatX8u::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 MatX8u::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatX8u.rows)
  return rows_;
}
inline void MatX8u::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatX8u.rows)
}

// optional int32 cols = 2;
inline void MatX8u::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 MatX8u::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatX8u.cols)
  return cols_;
}
inline void MatX8u::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatX8u.cols)
}

// repeated int32 data = 3;
inline int MatX8u::data_size() const {
  return data_.size();
}
inline void MatX8u::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 MatX8u::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatX8u.data)
  return data_.Get(index);
}
inline void MatX8u::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatX8u.data)
}
inline void MatX8u::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatX8u.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MatX8u::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatX8u.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MatX8u::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatX8u.data)
  return &data_;
}

// -------------------------------------------------------------------

// MatXd

// optional int32 rows = 1;
inline void MatXd::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 MatXd::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXd.rows)
  return rows_;
}
inline void MatXd::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXd.rows)
}

// optional int32 cols = 2;
inline void MatXd::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 MatXd::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXd.cols)
  return cols_;
}
inline void MatXd::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXd.cols)
}

// repeated double data = 3;
inline int MatXd::data_size() const {
  return data_.size();
}
inline void MatXd::clear_data() {
  data_.Clear();
}
inline double MatXd::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXd.data)
  return data_.Get(index);
}
inline void MatXd::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatXd.data)
}
inline void MatXd::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatXd.data)
}
inline const ::google::protobuf::RepeatedField< double >&
MatXd::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatXd.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
MatXd::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatXd.data)
  return &data_;
}

// -------------------------------------------------------------------

// MatXf

// optional int32 rows = 1;
inline void MatXf::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 MatXf::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXf.rows)
  return rows_;
}
inline void MatXf::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXf.rows)
}

// optional int32 cols = 2;
inline void MatXf::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 MatXf::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXf.cols)
  return cols_;
}
inline void MatXf::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXf.cols)
}

// repeated float data = 3;
inline int MatXf::data_size() const {
  return data_.size();
}
inline void MatXf::clear_data() {
  data_.Clear();
}
inline float MatXf::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXf.data)
  return data_.Get(index);
}
inline void MatXf::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatXf.data)
}
inline void MatXf::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatXf.data)
}
inline const ::google::protobuf::RepeatedField< float >&
MatXf::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatXf.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
MatXf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatXf.data)
  return &data_;
}

// -------------------------------------------------------------------

// KeyFrame

// optional int32 id = 1;
inline void KeyFrame::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 KeyFrame::id() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.id)
  return id_;
}
inline void KeyFrame::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.KeyFrame.id)
}

// optional .megslam.proto.MatXd Tcw = 2;
inline bool KeyFrame::has_tcw() const {
  return !_is_default_instance_ && tcw_ != NULL;
}
inline void KeyFrame::clear_tcw() {
  if (GetArenaNoVirtual() == NULL && tcw_ != NULL) delete tcw_;
  tcw_ = NULL;
}
inline const ::megslam::proto::MatXd& KeyFrame::tcw() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.Tcw)
  return tcw_ != NULL ? *tcw_ : *default_instance_->tcw_;
}
inline ::megslam::proto::MatXd* KeyFrame::mutable_tcw() {
  
  if (tcw_ == NULL) {
    tcw_ = new ::megslam::proto::MatXd;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.Tcw)
  return tcw_;
}
inline ::megslam::proto::MatXd* KeyFrame::release_tcw() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.Tcw)
  
  ::megslam::proto::MatXd* temp = tcw_;
  tcw_ = NULL;
  return temp;
}
inline void KeyFrame::set_allocated_tcw(::megslam::proto::MatXd* tcw) {
  delete tcw_;
  tcw_ = tcw;
  if (tcw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.Tcw)
}

// repeated .megslam.proto.Point2f key_points = 3;
inline int KeyFrame::key_points_size() const {
  return key_points_.size();
}
inline void KeyFrame::clear_key_points() {
  key_points_.Clear();
}
inline const ::megslam::proto::Point2f& KeyFrame::key_points(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.key_points)
  return key_points_.Get(index);
}
inline ::megslam::proto::Point2f* KeyFrame::mutable_key_points(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.key_points)
  return key_points_.Mutable(index);
}
inline ::megslam::proto::Point2f* KeyFrame::add_key_points() {
  // @@protoc_insertion_point(field_add:megslam.proto.KeyFrame.key_points)
  return key_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f >*
KeyFrame::mutable_key_points() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.KeyFrame.key_points)
  return &key_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f >&
KeyFrame::key_points() const {
  // @@protoc_insertion_point(field_list:megslam.proto.KeyFrame.key_points)
  return key_points_;
}

// optional .megslam.proto.MatXf local_descriptors = 4;
inline bool KeyFrame::has_local_descriptors() const {
  return !_is_default_instance_ && local_descriptors_ != NULL;
}
inline void KeyFrame::clear_local_descriptors() {
  if (GetArenaNoVirtual() == NULL && local_descriptors_ != NULL) delete local_descriptors_;
  local_descriptors_ = NULL;
}
inline const ::megslam::proto::MatXf& KeyFrame::local_descriptors() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.local_descriptors)
  return local_descriptors_ != NULL ? *local_descriptors_ : *default_instance_->local_descriptors_;
}
inline ::megslam::proto::MatXf* KeyFrame::mutable_local_descriptors() {
  
  if (local_descriptors_ == NULL) {
    local_descriptors_ = new ::megslam::proto::MatXf;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.local_descriptors)
  return local_descriptors_;
}
inline ::megslam::proto::MatXf* KeyFrame::release_local_descriptors() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.local_descriptors)
  
  ::megslam::proto::MatXf* temp = local_descriptors_;
  local_descriptors_ = NULL;
  return temp;
}
inline void KeyFrame::set_allocated_local_descriptors(::megslam::proto::MatXf* local_descriptors) {
  delete local_descriptors_;
  local_descriptors_ = local_descriptors;
  if (local_descriptors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.local_descriptors)
}

// repeated .megslam.proto.Point3f map_points = 5;
inline int KeyFrame::map_points_size() const {
  return map_points_.size();
}
inline void KeyFrame::clear_map_points() {
  map_points_.Clear();
}
inline const ::megslam::proto::Point3f& KeyFrame::map_points(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.map_points)
  return map_points_.Get(index);
}
inline ::megslam::proto::Point3f* KeyFrame::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.map_points)
  return map_points_.Mutable(index);
}
inline ::megslam::proto::Point3f* KeyFrame::add_map_points() {
  // @@protoc_insertion_point(field_add:megslam.proto.KeyFrame.map_points)
  return map_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >*
KeyFrame::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.KeyFrame.map_points)
  return &map_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >&
KeyFrame::map_points() const {
  // @@protoc_insertion_point(field_list:megslam.proto.KeyFrame.map_points)
  return map_points_;
}

// optional .megslam.proto.MatXf global_descriptor = 6;
inline bool KeyFrame::has_global_descriptor() const {
  return !_is_default_instance_ && global_descriptor_ != NULL;
}
inline void KeyFrame::clear_global_descriptor() {
  if (GetArenaNoVirtual() == NULL && global_descriptor_ != NULL) delete global_descriptor_;
  global_descriptor_ = NULL;
}
inline const ::megslam::proto::MatXf& KeyFrame::global_descriptor() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.global_descriptor)
  return global_descriptor_ != NULL ? *global_descriptor_ : *default_instance_->global_descriptor_;
}
inline ::megslam::proto::MatXf* KeyFrame::mutable_global_descriptor() {
  
  if (global_descriptor_ == NULL) {
    global_descriptor_ = new ::megslam::proto::MatXf;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.global_descriptor)
  return global_descriptor_;
}
inline ::megslam::proto::MatXf* KeyFrame::release_global_descriptor() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.global_descriptor)
  
  ::megslam::proto::MatXf* temp = global_descriptor_;
  global_descriptor_ = NULL;
  return temp;
}
inline void KeyFrame::set_allocated_global_descriptor(::megslam::proto::MatXf* global_descriptor) {
  delete global_descriptor_;
  global_descriptor_ = global_descriptor;
  if (global_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.global_descriptor)
}

// optional .megslam.proto.MatXi encoded_local_descriptors = 7;
inline bool KeyFrame::has_encoded_local_descriptors() const {
  return !_is_default_instance_ && encoded_local_descriptors_ != NULL;
}
inline void KeyFrame::clear_encoded_local_descriptors() {
  if (GetArenaNoVirtual() == NULL && encoded_local_descriptors_ != NULL) delete encoded_local_descriptors_;
  encoded_local_descriptors_ = NULL;
}
inline const ::megslam::proto::MatXi& KeyFrame::encoded_local_descriptors() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.encoded_local_descriptors)
  return encoded_local_descriptors_ != NULL ? *encoded_local_descriptors_ : *default_instance_->encoded_local_descriptors_;
}
inline ::megslam::proto::MatXi* KeyFrame::mutable_encoded_local_descriptors() {
  
  if (encoded_local_descriptors_ == NULL) {
    encoded_local_descriptors_ = new ::megslam::proto::MatXi;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.encoded_local_descriptors)
  return encoded_local_descriptors_;
}
inline ::megslam::proto::MatXi* KeyFrame::release_encoded_local_descriptors() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.encoded_local_descriptors)
  
  ::megslam::proto::MatXi* temp = encoded_local_descriptors_;
  encoded_local_descriptors_ = NULL;
  return temp;
}
inline void KeyFrame::set_allocated_encoded_local_descriptors(::megslam::proto::MatXi* encoded_local_descriptors) {
  delete encoded_local_descriptors_;
  encoded_local_descriptors_ = encoded_local_descriptors;
  if (encoded_local_descriptors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.encoded_local_descriptors)
}

// repeated int32 map_point_ids = 8;
inline int KeyFrame::map_point_ids_size() const {
  return map_point_ids_.size();
}
inline void KeyFrame::clear_map_point_ids() {
  map_point_ids_.Clear();
}
inline ::google::protobuf::int32 KeyFrame::map_point_ids(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.map_point_ids)
  return map_point_ids_.Get(index);
}
inline void KeyFrame::set_map_point_ids(int index, ::google::protobuf::int32 value) {
  map_point_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.KeyFrame.map_point_ids)
}
inline void KeyFrame::add_map_point_ids(::google::protobuf::int32 value) {
  map_point_ids_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.KeyFrame.map_point_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeyFrame::map_point_ids() const {
  // @@protoc_insertion_point(field_list:megslam.proto.KeyFrame.map_point_ids)
  return map_point_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeyFrame::mutable_map_point_ids() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.KeyFrame.map_point_ids)
  return &map_point_ids_;
}

// -------------------------------------------------------------------

// Database

// repeated .megslam.proto.KeyFrame keyframes = 1;
inline int Database::keyframes_size() const {
  return keyframes_.size();
}
inline void Database::clear_keyframes() {
  keyframes_.Clear();
}
inline const ::megslam::proto::KeyFrame& Database::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.Database.keyframes)
  return keyframes_.Get(index);
}
inline ::megslam::proto::KeyFrame* Database::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.Database.keyframes)
  return keyframes_.Mutable(index);
}
inline ::megslam::proto::KeyFrame* Database::add_keyframes() {
  // @@protoc_insertion_point(field_add:megslam.proto.Database.keyframes)
  return keyframes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame >*
Database::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.Database.keyframes)
  return &keyframes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame >&
Database::keyframes() const {
  // @@protoc_insertion_point(field_list:megslam.proto.Database.keyframes)
  return keyframes_;
}

// -------------------------------------------------------------------

// PointCloud

// repeated .megslam.proto.Point3f map_points = 1;
inline int PointCloud::map_points_size() const {
  return map_points_.size();
}
inline void PointCloud::clear_map_points() {
  map_points_.Clear();
}
inline const ::megslam::proto::Point3f& PointCloud::map_points(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.PointCloud.map_points)
  return map_points_.Get(index);
}
inline ::megslam::proto::Point3f* PointCloud::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.PointCloud.map_points)
  return map_points_.Mutable(index);
}
inline ::megslam::proto::Point3f* PointCloud::add_map_points() {
  // @@protoc_insertion_point(field_add:megslam.proto.PointCloud.map_points)
  return map_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >*
PointCloud::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.PointCloud.map_points)
  return &map_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >&
PointCloud::map_points() const {
  // @@protoc_insertion_point(field_list:megslam.proto.PointCloud.map_points)
  return map_points_;
}

// repeated .megslam.proto.MatXf descriptors = 2;
inline int PointCloud::descriptors_size() const {
  return descriptors_.size();
}
inline void PointCloud::clear_descriptors() {
  descriptors_.Clear();
}
inline const ::megslam::proto::MatXf& PointCloud::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.PointCloud.descriptors)
  return descriptors_.Get(index);
}
inline ::megslam::proto::MatXf* PointCloud::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.PointCloud.descriptors)
  return descriptors_.Mutable(index);
}
inline ::megslam::proto::MatXf* PointCloud::add_descriptors() {
  // @@protoc_insertion_point(field_add:megslam.proto.PointCloud.descriptors)
  return descriptors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf >*
PointCloud::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.PointCloud.descriptors)
  return &descriptors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf >&
PointCloud::descriptors() const {
  // @@protoc_insertion_point(field_list:megslam.proto.PointCloud.descriptors)
  return descriptors_;
}

// repeated float reprojection_errors = 3;
inline int PointCloud::reprojection_errors_size() const {
  return reprojection_errors_.size();
}
inline void PointCloud::clear_reprojection_errors() {
  reprojection_errors_.Clear();
}
inline float PointCloud::reprojection_errors(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_.Get(index);
}
inline void PointCloud::set_reprojection_errors(int index, float value) {
  reprojection_errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.PointCloud.reprojection_errors)
}
inline void PointCloud::add_reprojection_errors(float value) {
  reprojection_errors_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.PointCloud.reprojection_errors)
}
inline const ::google::protobuf::RepeatedField< float >&
PointCloud::reprojection_errors() const {
  // @@protoc_insertion_point(field_list:megslam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_;
}
inline ::google::protobuf::RepeatedField< float >*
PointCloud::mutable_reprojection_errors() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.PointCloud.reprojection_errors)
  return &reprojection_errors_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace megslam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_megslam_5fproto_5fkeyframe_2eproto__INCLUDED
