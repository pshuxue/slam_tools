// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slam_proto_cloud.proto

#ifndef PROTOBUF_slam_5fproto_5fcloud_2eproto__INCLUDED
#define PROTOBUF_slam_5fproto_5fcloud_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace slam {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
void protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto();
void protobuf_ShutdownFile_slam_5fproto_5fcloud_2eproto();

class MatXf;
class Point3f;
class PointCloud;

// ===================================================================

class Point3f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:slam.proto.Point3f) */ {
 public:
  Point3f();
  virtual ~Point3f();

  Point3f(const Point3f& from);

  inline Point3f& operator=(const Point3f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3f& default_instance();

  void Swap(Point3f* other);

  // implements Message ----------------------------------------------

  inline Point3f* New() const { return New(NULL); }

  Point3f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point3f& from);
  void MergeFrom(const Point3f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point3f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:slam.proto.Point3f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  friend void protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto();
  friend void protobuf_ShutdownFile_slam_5fproto_5fcloud_2eproto();

  void InitAsDefaultInstance();
  static Point3f* default_instance_;
};
// -------------------------------------------------------------------

class MatXf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:slam.proto.MatXf) */ {
 public:
  MatXf();
  virtual ~MatXf();

  MatXf(const MatXf& from);

  inline MatXf& operator=(const MatXf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatXf& default_instance();

  void Swap(MatXf* other);

  // implements Message ----------------------------------------------

  inline MatXf* New() const { return New(NULL); }

  MatXf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatXf& from);
  void MergeFrom(const MatXf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatXf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // optional int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // repeated float data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::google::protobuf::RepeatedField< float >&
      data() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:slam.proto.MatXf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::RepeatedField< float > data_;
  mutable int _data_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  friend void protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto();
  friend void protobuf_ShutdownFile_slam_5fproto_5fcloud_2eproto();

  void InitAsDefaultInstance();
  static MatXf* default_instance_;
};
// -------------------------------------------------------------------

class PointCloud : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:slam.proto.PointCloud) */ {
 public:
  PointCloud();
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointCloud& default_instance();

  void Swap(PointCloud* other);

  // implements Message ----------------------------------------------

  inline PointCloud* New() const { return New(NULL); }

  PointCloud* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointCloud* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .slam.proto.Point3f map_points = 1;
  int map_points_size() const;
  void clear_map_points();
  static const int kMapPointsFieldNumber = 1;
  const ::slam::proto::Point3f& map_points(int index) const;
  ::slam::proto::Point3f* mutable_map_points(int index);
  ::slam::proto::Point3f* add_map_points();
  ::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f >*
      mutable_map_points();
  const ::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f >&
      map_points() const;

  // repeated .slam.proto.MatXf descriptors = 2;
  int descriptors_size() const;
  void clear_descriptors();
  static const int kDescriptorsFieldNumber = 2;
  const ::slam::proto::MatXf& descriptors(int index) const;
  ::slam::proto::MatXf* mutable_descriptors(int index);
  ::slam::proto::MatXf* add_descriptors();
  ::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf >*
      mutable_descriptors();
  const ::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf >&
      descriptors() const;

  // repeated float reprojection_errors = 3;
  int reprojection_errors_size() const;
  void clear_reprojection_errors();
  static const int kReprojectionErrorsFieldNumber = 3;
  float reprojection_errors(int index) const;
  void set_reprojection_errors(int index, float value);
  void add_reprojection_errors(float value);
  const ::google::protobuf::RepeatedField< float >&
      reprojection_errors() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_reprojection_errors();

  // @@protoc_insertion_point(class_scope:slam.proto.PointCloud)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f > map_points_;
  ::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf > descriptors_;
  ::google::protobuf::RepeatedField< float > reprojection_errors_;
  mutable int _reprojection_errors_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  friend void protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto();
  friend void protobuf_ShutdownFile_slam_5fproto_5fcloud_2eproto();

  void InitAsDefaultInstance();
  static PointCloud* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3f

// optional float x = 1;
inline void Point3f::clear_x() {
  x_ = 0;
}
inline float Point3f::x() const {
  // @@protoc_insertion_point(field_get:slam.proto.Point3f.x)
  return x_;
}
inline void Point3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.Point3f.x)
}

// optional float y = 2;
inline void Point3f::clear_y() {
  y_ = 0;
}
inline float Point3f::y() const {
  // @@protoc_insertion_point(field_get:slam.proto.Point3f.y)
  return y_;
}
inline void Point3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.Point3f.y)
}

// optional float z = 3;
inline void Point3f::clear_z() {
  z_ = 0;
}
inline float Point3f::z() const {
  // @@protoc_insertion_point(field_get:slam.proto.Point3f.z)
  return z_;
}
inline void Point3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.Point3f.z)
}

// -------------------------------------------------------------------

// MatXf

// optional int32 rows = 1;
inline void MatXf::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 MatXf::rows() const {
  // @@protoc_insertion_point(field_get:slam.proto.MatXf.rows)
  return rows_;
}
inline void MatXf::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.MatXf.rows)
}

// optional int32 cols = 2;
inline void MatXf::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 MatXf::cols() const {
  // @@protoc_insertion_point(field_get:slam.proto.MatXf.cols)
  return cols_;
}
inline void MatXf::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.MatXf.cols)
}

// repeated float data = 3;
inline int MatXf::data_size() const {
  return data_.size();
}
inline void MatXf::clear_data() {
  data_.Clear();
}
inline float MatXf::data(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.MatXf.data)
  return data_.Get(index);
}
inline void MatXf::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:slam.proto.MatXf.data)
}
inline void MatXf::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:slam.proto.MatXf.data)
}
inline const ::google::protobuf::RepeatedField< float >&
MatXf::data() const {
  // @@protoc_insertion_point(field_list:slam.proto.MatXf.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< float >*
MatXf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.MatXf.data)
  return &data_;
}

// -------------------------------------------------------------------

// PointCloud

// repeated .slam.proto.Point3f map_points = 1;
inline int PointCloud::map_points_size() const {
  return map_points_.size();
}
inline void PointCloud::clear_map_points() {
  map_points_.Clear();
}
inline const ::slam::proto::Point3f& PointCloud::map_points(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.PointCloud.map_points)
  return map_points_.Get(index);
}
inline ::slam::proto::Point3f* PointCloud::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:slam.proto.PointCloud.map_points)
  return map_points_.Mutable(index);
}
inline ::slam::proto::Point3f* PointCloud::add_map_points() {
  // @@protoc_insertion_point(field_add:slam.proto.PointCloud.map_points)
  return map_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f >*
PointCloud::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.PointCloud.map_points)
  return &map_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f >&
PointCloud::map_points() const {
  // @@protoc_insertion_point(field_list:slam.proto.PointCloud.map_points)
  return map_points_;
}

// repeated .slam.proto.MatXf descriptors = 2;
inline int PointCloud::descriptors_size() const {
  return descriptors_.size();
}
inline void PointCloud::clear_descriptors() {
  descriptors_.Clear();
}
inline const ::slam::proto::MatXf& PointCloud::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.PointCloud.descriptors)
  return descriptors_.Get(index);
}
inline ::slam::proto::MatXf* PointCloud::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:slam.proto.PointCloud.descriptors)
  return descriptors_.Mutable(index);
}
inline ::slam::proto::MatXf* PointCloud::add_descriptors() {
  // @@protoc_insertion_point(field_add:slam.proto.PointCloud.descriptors)
  return descriptors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf >*
PointCloud::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.PointCloud.descriptors)
  return &descriptors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf >&
PointCloud::descriptors() const {
  // @@protoc_insertion_point(field_list:slam.proto.PointCloud.descriptors)
  return descriptors_;
}

// repeated float reprojection_errors = 3;
inline int PointCloud::reprojection_errors_size() const {
  return reprojection_errors_.size();
}
inline void PointCloud::clear_reprojection_errors() {
  reprojection_errors_.Clear();
}
inline float PointCloud::reprojection_errors(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_.Get(index);
}
inline void PointCloud::set_reprojection_errors(int index, float value) {
  reprojection_errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:slam.proto.PointCloud.reprojection_errors)
}
inline void PointCloud::add_reprojection_errors(float value) {
  reprojection_errors_.Add(value);
  // @@protoc_insertion_point(field_add:slam.proto.PointCloud.reprojection_errors)
}
inline const ::google::protobuf::RepeatedField< float >&
PointCloud::reprojection_errors() const {
  // @@protoc_insertion_point(field_list:slam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_;
}
inline ::google::protobuf::RepeatedField< float >*
PointCloud::mutable_reprojection_errors() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.PointCloud.reprojection_errors)
  return &reprojection_errors_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace slam

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_slam_5fproto_5fcloud_2eproto__INCLUDED
