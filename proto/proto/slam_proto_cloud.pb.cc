// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slam_proto_cloud.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "slam_proto_cloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace slam {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Point3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatXf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatXf_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloud_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto() {
  protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "slam_proto_cloud.proto");
  GOOGLE_CHECK(file != NULL);
  Point3f_descriptor_ = file->message_type(0);
  static const int Point3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, z_),
  };
  Point3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point3f_descriptor_,
      Point3f::default_instance_,
      Point3f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, _is_default_instance_));
  MatXf_descriptor_ = file->message_type(1);
  static const int MatXf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, data_),
  };
  MatXf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatXf_descriptor_,
      MatXf::default_instance_,
      MatXf_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatXf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, _is_default_instance_));
  PointCloud_descriptor_ = file->message_type(2);
  static const int PointCloud_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, map_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, reprojection_errors_),
  };
  PointCloud_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointCloud_descriptor_,
      PointCloud::default_instance_,
      PointCloud_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointCloud),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_slam_5fproto_5fcloud_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point3f_descriptor_, &Point3f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatXf_descriptor_, &MatXf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointCloud_descriptor_, &PointCloud::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_slam_5fproto_5fcloud_2eproto() {
  delete Point3f::default_instance_;
  delete Point3f_reflection_;
  delete MatXf::default_instance_;
  delete MatXf_reflection_;
  delete PointCloud::default_instance_;
  delete PointCloud_reflection_;
}

void protobuf_AddDesc_slam_5fproto_5fcloud_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_slam_5fproto_5fcloud_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026slam_proto_cloud.proto\022\nslam.proto\"*\n\007"
    "Point3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
    "\"1\n\005MatXf\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\014\n"
    "\004data\030\003 \003(\002\"z\n\nPointCloud\022\'\n\nmap_points\030"
    "\001 \003(\0132\023.slam.proto.Point3f\022&\n\013descriptor"
    "s\030\002 \003(\0132\021.slam.proto.MatXf\022\033\n\023reprojecti"
    "on_errors\030\003 \003(\002b\006proto3", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "slam_proto_cloud.proto", &protobuf_RegisterTypes);
  Point3f::default_instance_ = new Point3f();
  MatXf::default_instance_ = new MatXf();
  PointCloud::default_instance_ = new PointCloud();
  Point3f::default_instance_->InitAsDefaultInstance();
  MatXf::default_instance_->InitAsDefaultInstance();
  PointCloud::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_slam_5fproto_5fcloud_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_slam_5fproto_5fcloud_2eproto {
  StaticDescriptorInitializer_slam_5fproto_5fcloud_2eproto() {
    protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  }
} static_descriptor_initializer_slam_5fproto_5fcloud_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3f::kXFieldNumber;
const int Point3f::kYFieldNumber;
const int Point3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3f::Point3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slam.proto.Point3f)
}

void Point3f::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point3f::Point3f(const Point3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slam.proto.Point3f)
}

void Point3f::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:slam.proto.Point3f)
  SharedDtor();
}

void Point3f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3f_descriptor_;
}

const Point3f& Point3f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  return *default_instance_;
}

Point3f* Point3f::default_instance_ = NULL;

Point3f* Point3f::New(::google::protobuf::Arena* arena) const {
  Point3f* n = new Point3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:slam.proto.Point3f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point3f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point3f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slam.proto.Point3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slam.proto.Point3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slam.proto.Point3f)
  return false;
#undef DO_
}

void Point3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slam.proto.Point3f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:slam.proto.Point3f)
}

::google::protobuf::uint8* Point3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slam.proto.Point3f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slam.proto.Point3f)
  return target;
}

int Point3f::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slam.proto.Point3f)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slam.proto.Point3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point3f* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slam.proto.Point3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slam.proto.Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slam.proto.Point3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slam.proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slam.proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {

  return true;
}

void Point3f::Swap(Point3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3f::InternalSwap(Point3f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3f_descriptor_;
  metadata.reflection = Point3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3f

// optional float x = 1;
void Point3f::clear_x() {
  x_ = 0;
}
 float Point3f::x() const {
  // @@protoc_insertion_point(field_get:slam.proto.Point3f.x)
  return x_;
}
 void Point3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.Point3f.x)
}

// optional float y = 2;
void Point3f::clear_y() {
  y_ = 0;
}
 float Point3f::y() const {
  // @@protoc_insertion_point(field_get:slam.proto.Point3f.y)
  return y_;
}
 void Point3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.Point3f.y)
}

// optional float z = 3;
void Point3f::clear_z() {
  z_ = 0;
}
 float Point3f::z() const {
  // @@protoc_insertion_point(field_get:slam.proto.Point3f.z)
  return z_;
}
 void Point3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.Point3f.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatXf::kRowsFieldNumber;
const int MatXf::kColsFieldNumber;
const int MatXf::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatXf::MatXf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slam.proto.MatXf)
}

void MatXf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatXf::MatXf(const MatXf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slam.proto.MatXf)
}

void MatXf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
}

MatXf::~MatXf() {
  // @@protoc_insertion_point(destructor:slam.proto.MatXf)
  SharedDtor();
}

void MatXf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatXf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatXf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatXf_descriptor_;
}

const MatXf& MatXf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  return *default_instance_;
}

MatXf* MatXf::default_instance_ = NULL;

MatXf* MatXf::New(::google::protobuf::Arena* arena) const {
  MatXf* n = new MatXf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatXf::Clear() {
// @@protoc_insertion_point(message_clear_start:slam.proto.MatXf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatXf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatXf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool MatXf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slam.proto.MatXf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slam.proto.MatXf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slam.proto.MatXf)
  return false;
#undef DO_
}

void MatXf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slam.proto.MatXf)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated float data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:slam.proto.MatXf)
}

::google::protobuf::uint8* MatXf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slam.proto.MatXf)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated float data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slam.proto.MatXf)
  return target;
}

int MatXf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slam.proto.MatXf)
  int total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // repeated float data = 3;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatXf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slam.proto.MatXf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MatXf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatXf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slam.proto.MatXf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slam.proto.MatXf)
    MergeFrom(*source);
  }
}

void MatXf::MergeFrom(const MatXf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slam.proto.MatXf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void MatXf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slam.proto.MatXf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatXf::CopyFrom(const MatXf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slam.proto.MatXf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatXf::IsInitialized() const {

  return true;
}

void MatXf::Swap(MatXf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatXf::InternalSwap(MatXf* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatXf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatXf_descriptor_;
  metadata.reflection = MatXf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatXf

// optional int32 rows = 1;
void MatXf::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 MatXf::rows() const {
  // @@protoc_insertion_point(field_get:slam.proto.MatXf.rows)
  return rows_;
}
 void MatXf::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.MatXf.rows)
}

// optional int32 cols = 2;
void MatXf::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 MatXf::cols() const {
  // @@protoc_insertion_point(field_get:slam.proto.MatXf.cols)
  return cols_;
}
 void MatXf::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:slam.proto.MatXf.cols)
}

// repeated float data = 3;
int MatXf::data_size() const {
  return data_.size();
}
void MatXf::clear_data() {
  data_.Clear();
}
 float MatXf::data(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.MatXf.data)
  return data_.Get(index);
}
 void MatXf::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:slam.proto.MatXf.data)
}
 void MatXf::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:slam.proto.MatXf.data)
}
 const ::google::protobuf::RepeatedField< float >&
MatXf::data() const {
  // @@protoc_insertion_point(field_list:slam.proto.MatXf.data)
  return data_;
}
 ::google::protobuf::RepeatedField< float >*
MatXf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.MatXf.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kMapPointsFieldNumber;
const int PointCloud::kDescriptorsFieldNumber;
const int PointCloud::kReprojectionErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:slam.proto.PointCloud)
}

void PointCloud::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:slam.proto.PointCloud)
}

void PointCloud::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:slam.proto.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloud_descriptor_;
}

const PointCloud& PointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slam_5fproto_5fcloud_2eproto();
  return *default_instance_;
}

PointCloud* PointCloud::default_instance_ = NULL;

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  PointCloud* n = new PointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:slam.proto.PointCloud)
  map_points_.Clear();
  descriptors_.Clear();
  reprojection_errors_.Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:slam.proto.PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .slam.proto.Point3f map_points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_map_points;
        if (input->ExpectTag(18)) goto parse_loop_descriptors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .slam.proto.MatXf descriptors = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_descriptors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_descriptors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_reprojection_errors;
        break;
      }

      // repeated float reprojection_errors = 3;
      case 3: {
        if (tag == 26) {
         parse_reprojection_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_reprojection_errors())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_reprojection_errors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:slam.proto.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:slam.proto.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:slam.proto.PointCloud)
  // repeated .slam.proto.Point3f map_points = 1;
  for (unsigned int i = 0, n = this->map_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_points(i), output);
  }

  // repeated .slam.proto.MatXf descriptors = 2;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptors(i), output);
  }

  // repeated float reprojection_errors = 3;
  if (this->reprojection_errors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reprojection_errors_cached_byte_size_);
  }
  for (int i = 0; i < this->reprojection_errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->reprojection_errors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:slam.proto.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:slam.proto.PointCloud)
  // repeated .slam.proto.Point3f map_points = 1;
  for (unsigned int i = 0, n = this->map_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->map_points(i), false, target);
  }

  // repeated .slam.proto.MatXf descriptors = 2;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->descriptors(i), false, target);
  }

  // repeated float reprojection_errors = 3;
  if (this->reprojection_errors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _reprojection_errors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->reprojection_errors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->reprojection_errors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:slam.proto.PointCloud)
  return target;
}

int PointCloud::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:slam.proto.PointCloud)
  int total_size = 0;

  // repeated .slam.proto.Point3f map_points = 1;
  total_size += 1 * this->map_points_size();
  for (int i = 0; i < this->map_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_points(i));
  }

  // repeated .slam.proto.MatXf descriptors = 2;
  total_size += 1 * this->descriptors_size();
  for (int i = 0; i < this->descriptors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptors(i));
  }

  // repeated float reprojection_errors = 3;
  {
    int data_size = 0;
    data_size = 4 * this->reprojection_errors_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reprojection_errors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:slam.proto.PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointCloud* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:slam.proto.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:slam.proto.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:slam.proto.PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  map_points_.MergeFrom(from.map_points_);
  descriptors_.MergeFrom(from.descriptors_);
  reprojection_errors_.MergeFrom(from.reprojection_errors_);
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:slam.proto.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:slam.proto.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {

  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  map_points_.UnsafeArenaSwap(&other->map_points_);
  descriptors_.UnsafeArenaSwap(&other->descriptors_);
  reprojection_errors_.UnsafeArenaSwap(&other->reprojection_errors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloud_descriptor_;
  metadata.reflection = PointCloud_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloud

// repeated .slam.proto.Point3f map_points = 1;
int PointCloud::map_points_size() const {
  return map_points_.size();
}
void PointCloud::clear_map_points() {
  map_points_.Clear();
}
const ::slam::proto::Point3f& PointCloud::map_points(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.PointCloud.map_points)
  return map_points_.Get(index);
}
::slam::proto::Point3f* PointCloud::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:slam.proto.PointCloud.map_points)
  return map_points_.Mutable(index);
}
::slam::proto::Point3f* PointCloud::add_map_points() {
  // @@protoc_insertion_point(field_add:slam.proto.PointCloud.map_points)
  return map_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f >*
PointCloud::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.PointCloud.map_points)
  return &map_points_;
}
const ::google::protobuf::RepeatedPtrField< ::slam::proto::Point3f >&
PointCloud::map_points() const {
  // @@protoc_insertion_point(field_list:slam.proto.PointCloud.map_points)
  return map_points_;
}

// repeated .slam.proto.MatXf descriptors = 2;
int PointCloud::descriptors_size() const {
  return descriptors_.size();
}
void PointCloud::clear_descriptors() {
  descriptors_.Clear();
}
const ::slam::proto::MatXf& PointCloud::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.PointCloud.descriptors)
  return descriptors_.Get(index);
}
::slam::proto::MatXf* PointCloud::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:slam.proto.PointCloud.descriptors)
  return descriptors_.Mutable(index);
}
::slam::proto::MatXf* PointCloud::add_descriptors() {
  // @@protoc_insertion_point(field_add:slam.proto.PointCloud.descriptors)
  return descriptors_.Add();
}
::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf >*
PointCloud::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.PointCloud.descriptors)
  return &descriptors_;
}
const ::google::protobuf::RepeatedPtrField< ::slam::proto::MatXf >&
PointCloud::descriptors() const {
  // @@protoc_insertion_point(field_list:slam.proto.PointCloud.descriptors)
  return descriptors_;
}

// repeated float reprojection_errors = 3;
int PointCloud::reprojection_errors_size() const {
  return reprojection_errors_.size();
}
void PointCloud::clear_reprojection_errors() {
  reprojection_errors_.Clear();
}
 float PointCloud::reprojection_errors(int index) const {
  // @@protoc_insertion_point(field_get:slam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_.Get(index);
}
 void PointCloud::set_reprojection_errors(int index, float value) {
  reprojection_errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:slam.proto.PointCloud.reprojection_errors)
}
 void PointCloud::add_reprojection_errors(float value) {
  reprojection_errors_.Add(value);
  // @@protoc_insertion_point(field_add:slam.proto.PointCloud.reprojection_errors)
}
 const ::google::protobuf::RepeatedField< float >&
PointCloud::reprojection_errors() const {
  // @@protoc_insertion_point(field_list:slam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_;
}
 ::google::protobuf::RepeatedField< float >*
PointCloud::mutable_reprojection_errors() {
  // @@protoc_insertion_point(field_mutable_list:slam.proto.PointCloud.reprojection_errors)
  return &reprojection_errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace slam

// @@protoc_insertion_point(global_scope)
