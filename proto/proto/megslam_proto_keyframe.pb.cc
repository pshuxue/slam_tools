// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megslam_proto_keyframe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "megslam_proto_keyframe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace megslam {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Point2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatXi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatXi_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatX8u_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatX8u_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatXd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatXd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatXf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatXf_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Database_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Database_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloud_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto() {
  protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "megslam_proto_keyframe.proto");
  GOOGLE_CHECK(file != NULL);
  Point2f_descriptor_ = file->message_type(0);
  static const int Point2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, y_),
  };
  Point2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point2f_descriptor_,
      Point2f::default_instance_,
      Point2f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2f, _is_default_instance_));
  Point3f_descriptor_ = file->message_type(1);
  static const int Point3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, z_),
  };
  Point3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point3f_descriptor_,
      Point3f::default_instance_,
      Point3f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point3f, _is_default_instance_));
  MatXi_descriptor_ = file->message_type(2);
  static const int MatXi_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXi, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXi, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXi, data_),
  };
  MatXi_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatXi_descriptor_,
      MatXi::default_instance_,
      MatXi_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatXi),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXi, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXi, _is_default_instance_));
  MatX8u_descriptor_ = file->message_type(3);
  static const int MatX8u_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatX8u, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatX8u, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatX8u, data_),
  };
  MatX8u_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatX8u_descriptor_,
      MatX8u::default_instance_,
      MatX8u_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatX8u),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatX8u, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatX8u, _is_default_instance_));
  MatXd_descriptor_ = file->message_type(4);
  static const int MatXd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXd, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXd, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXd, data_),
  };
  MatXd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatXd_descriptor_,
      MatXd::default_instance_,
      MatXd_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatXd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXd, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXd, _is_default_instance_));
  MatXf_descriptor_ = file->message_type(5);
  static const int MatXf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, data_),
  };
  MatXf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MatXf_descriptor_,
      MatXf::default_instance_,
      MatXf_offsets_,
      -1,
      -1,
      -1,
      sizeof(MatXf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatXf, _is_default_instance_));
  KeyFrame_descriptor_ = file->message_type(6);
  static const int KeyFrame_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, tcw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, key_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, local_descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, map_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, global_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, encoded_local_descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, map_point_ids_),
  };
  KeyFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyFrame_descriptor_,
      KeyFrame::default_instance_,
      KeyFrame_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyFrame, _is_default_instance_));
  Database_descriptor_ = file->message_type(7);
  static const int Database_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, keyframes_),
  };
  Database_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Database_descriptor_,
      Database::default_instance_,
      Database_offsets_,
      -1,
      -1,
      -1,
      sizeof(Database),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Database, _is_default_instance_));
  PointCloud_descriptor_ = file->message_type(8);
  static const int PointCloud_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, map_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, descriptors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, reprojection_errors_),
  };
  PointCloud_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointCloud_descriptor_,
      PointCloud::default_instance_,
      PointCloud_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointCloud),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_megslam_5fproto_5fkeyframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point2f_descriptor_, &Point2f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point3f_descriptor_, &Point3f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatXi_descriptor_, &MatXi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatX8u_descriptor_, &MatX8u::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatXd_descriptor_, &MatXd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MatXf_descriptor_, &MatXf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyFrame_descriptor_, &KeyFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Database_descriptor_, &Database::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointCloud_descriptor_, &PointCloud::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto() {
  delete Point2f::default_instance_;
  delete Point2f_reflection_;
  delete Point3f::default_instance_;
  delete Point3f_reflection_;
  delete MatXi::default_instance_;
  delete MatXi_reflection_;
  delete MatX8u::default_instance_;
  delete MatX8u_reflection_;
  delete MatXd::default_instance_;
  delete MatXd_reflection_;
  delete MatXf::default_instance_;
  delete MatXf_reflection_;
  delete KeyFrame::default_instance_;
  delete KeyFrame_reflection_;
  delete Database::default_instance_;
  delete Database_reflection_;
  delete PointCloud::default_instance_;
  delete PointCloud_reflection_;
}

void protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034megslam_proto_keyframe.proto\022\rmegslam."
    "proto\"\037\n\007Point2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"*"
    "\n\007Point3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001"
    "(\002\"1\n\005MatXi\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022"
    "\014\n\004data\030\003 \003(\005\"2\n\006MatX8u\022\014\n\004rows\030\001 \001(\005\022\014\n"
    "\004cols\030\002 \001(\005\022\014\n\004data\030\003 \003(\005\"1\n\005MatXd\022\014\n\004ro"
    "ws\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\014\n\004data\030\003 \003(\001\"1\n\005"
    "MatXf\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\014\n\004dat"
    "a\030\003 \003(\002\"\303\002\n\010KeyFrame\022\n\n\002id\030\001 \001(\005\022!\n\003Tcw\030"
    "\002 \001(\0132\024.megslam.proto.MatXd\022*\n\nkey_point"
    "s\030\003 \003(\0132\026.megslam.proto.Point2f\022/\n\021local"
    "_descriptors\030\004 \001(\0132\024.megslam.proto.MatXf"
    "\022*\n\nmap_points\030\005 \003(\0132\026.megslam.proto.Poi"
    "nt3f\022/\n\021global_descriptor\030\006 \001(\0132\024.megsla"
    "m.proto.MatXf\0227\n\031encoded_local_descripto"
    "rs\030\007 \001(\0132\024.megslam.proto.MatXi\022\025\n\rmap_po"
    "int_ids\030\010 \003(\005\"6\n\010Database\022*\n\tkeyframes\030\001"
    " \003(\0132\027.megslam.proto.KeyFrame\"\200\001\n\nPointC"
    "loud\022*\n\nmap_points\030\001 \003(\0132\026.megslam.proto"
    ".Point3f\022)\n\013descriptors\030\002 \003(\0132\024.megslam."
    "proto.MatXf\022\033\n\023reprojection_errors\030\003 \003(\002"
    "b\006proto3", 848);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "megslam_proto_keyframe.proto", &protobuf_RegisterTypes);
  Point2f::default_instance_ = new Point2f();
  Point3f::default_instance_ = new Point3f();
  MatXi::default_instance_ = new MatXi();
  MatX8u::default_instance_ = new MatX8u();
  MatXd::default_instance_ = new MatXd();
  MatXf::default_instance_ = new MatXf();
  KeyFrame::default_instance_ = new KeyFrame();
  Database::default_instance_ = new Database();
  PointCloud::default_instance_ = new PointCloud();
  Point2f::default_instance_->InitAsDefaultInstance();
  Point3f::default_instance_->InitAsDefaultInstance();
  MatXi::default_instance_->InitAsDefaultInstance();
  MatX8u::default_instance_->InitAsDefaultInstance();
  MatXd::default_instance_->InitAsDefaultInstance();
  MatXf::default_instance_->InitAsDefaultInstance();
  KeyFrame::default_instance_->InitAsDefaultInstance();
  Database::default_instance_->InitAsDefaultInstance();
  PointCloud::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_megslam_5fproto_5fkeyframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_megslam_5fproto_5fkeyframe_2eproto {
  StaticDescriptorInitializer_megslam_5fproto_5fkeyframe_2eproto() {
    protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  }
} static_descriptor_initializer_megslam_5fproto_5fkeyframe_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2f::kXFieldNumber;
const int Point2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2f::Point2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.Point2f)
}

void Point2f::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point2f::Point2f(const Point2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.Point2f)
}

void Point2f::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:megslam.proto.Point2f)
  SharedDtor();
}

void Point2f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2f_descriptor_;
}

const Point2f& Point2f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

Point2f* Point2f::default_instance_ = NULL;

Point2f* Point2f::New(::google::protobuf::Arena* arena) const {
  Point2f* n = new Point2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.Point2f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point2f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point2f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.Point2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.Point2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.Point2f)
  return false;
#undef DO_
}

void Point2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.Point2f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.Point2f)
}

::google::protobuf::uint8* Point2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.Point2f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.Point2f)
  return target;
}

int Point2f::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.Point2f)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.Point2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point2f* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.Point2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.Point2f)
    MergeFrom(*source);
  }
}

void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.Point2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {

  return true;
}

void Point2f::Swap(Point2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2f::InternalSwap(Point2f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2f_descriptor_;
  metadata.reflection = Point2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2f

// optional float x = 1;
void Point2f::clear_x() {
  x_ = 0;
}
 float Point2f::x() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point2f.x)
  return x_;
}
 void Point2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point2f.x)
}

// optional float y = 2;
void Point2f::clear_y() {
  y_ = 0;
}
 float Point2f::y() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point2f.y)
  return y_;
}
 void Point2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point2f.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3f::kXFieldNumber;
const int Point3f::kYFieldNumber;
const int Point3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3f::Point3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.Point3f)
}

void Point3f::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point3f::Point3f(const Point3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.Point3f)
}

void Point3f::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

Point3f::~Point3f() {
  // @@protoc_insertion_point(destructor:megslam.proto.Point3f)
  SharedDtor();
}

void Point3f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point3f_descriptor_;
}

const Point3f& Point3f::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

Point3f* Point3f::default_instance_ = NULL;

Point3f* Point3f::New(::google::protobuf::Arena* arena) const {
  Point3f* n = new Point3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point3f::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.Point3f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point3f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point3f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.Point3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.Point3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.Point3f)
  return false;
#undef DO_
}

void Point3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.Point3f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.Point3f)
}

::google::protobuf::uint8* Point3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.Point3f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.Point3f)
  return target;
}

int Point3f::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.Point3f)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.Point3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point3f* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.Point3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.Point3f)
    MergeFrom(*source);
  }
}

void Point3f::MergeFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.Point3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Point3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3f::CopyFrom(const Point3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.Point3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3f::IsInitialized() const {

  return true;
}

void Point3f::Swap(Point3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3f::InternalSwap(Point3f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point3f_descriptor_;
  metadata.reflection = Point3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3f

// optional float x = 1;
void Point3f::clear_x() {
  x_ = 0;
}
 float Point3f::x() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point3f.x)
  return x_;
}
 void Point3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point3f.x)
}

// optional float y = 2;
void Point3f::clear_y() {
  y_ = 0;
}
 float Point3f::y() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point3f.y)
  return y_;
}
 void Point3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point3f.y)
}

// optional float z = 3;
void Point3f::clear_z() {
  z_ = 0;
}
 float Point3f::z() const {
  // @@protoc_insertion_point(field_get:megslam.proto.Point3f.z)
  return z_;
}
 void Point3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.Point3f.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatXi::kRowsFieldNumber;
const int MatXi::kColsFieldNumber;
const int MatXi::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatXi::MatXi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.MatXi)
}

void MatXi::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatXi::MatXi(const MatXi& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.MatXi)
}

void MatXi::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
}

MatXi::~MatXi() {
  // @@protoc_insertion_point(destructor:megslam.proto.MatXi)
  SharedDtor();
}

void MatXi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatXi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatXi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatXi_descriptor_;
}

const MatXi& MatXi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

MatXi* MatXi::default_instance_ = NULL;

MatXi* MatXi::New(::google::protobuf::Arena* arena) const {
  MatXi* n = new MatXi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatXi::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.MatXi)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatXi, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatXi*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool MatXi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.MatXi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.MatXi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.MatXi)
  return false;
#undef DO_
}

void MatXi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.MatXi)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated int32 data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.MatXi)
}

::google::protobuf::uint8* MatXi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.MatXi)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated int32 data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.MatXi)
  return target;
}

int MatXi::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.MatXi)
  int total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // repeated int32 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatXi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.MatXi)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MatXi* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatXi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.MatXi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.MatXi)
    MergeFrom(*source);
  }
}

void MatXi::MergeFrom(const MatXi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.MatXi)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void MatXi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.MatXi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatXi::CopyFrom(const MatXi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.MatXi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatXi::IsInitialized() const {

  return true;
}

void MatXi::Swap(MatXi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatXi::InternalSwap(MatXi* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatXi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatXi_descriptor_;
  metadata.reflection = MatXi_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatXi

// optional int32 rows = 1;
void MatXi::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 MatXi::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXi.rows)
  return rows_;
}
 void MatXi::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXi.rows)
}

// optional int32 cols = 2;
void MatXi::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 MatXi::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXi.cols)
  return cols_;
}
 void MatXi::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXi.cols)
}

// repeated int32 data = 3;
int MatXi::data_size() const {
  return data_.size();
}
void MatXi::clear_data() {
  data_.Clear();
}
 ::google::protobuf::int32 MatXi::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXi.data)
  return data_.Get(index);
}
 void MatXi::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatXi.data)
}
 void MatXi::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatXi.data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MatXi::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatXi.data)
  return data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MatXi::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatXi.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatX8u::kRowsFieldNumber;
const int MatX8u::kColsFieldNumber;
const int MatX8u::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatX8u::MatX8u()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.MatX8u)
}

void MatX8u::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatX8u::MatX8u(const MatX8u& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.MatX8u)
}

void MatX8u::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
}

MatX8u::~MatX8u() {
  // @@protoc_insertion_point(destructor:megslam.proto.MatX8u)
  SharedDtor();
}

void MatX8u::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatX8u::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatX8u::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatX8u_descriptor_;
}

const MatX8u& MatX8u::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

MatX8u* MatX8u::default_instance_ = NULL;

MatX8u* MatX8u::New(::google::protobuf::Arena* arena) const {
  MatX8u* n = new MatX8u;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatX8u::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.MatX8u)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatX8u, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatX8u*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool MatX8u::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.MatX8u)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated int32 data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.MatX8u)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.MatX8u)
  return false;
#undef DO_
}

void MatX8u::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.MatX8u)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated int32 data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.MatX8u)
}

::google::protobuf::uint8* MatX8u::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.MatX8u)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated int32 data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.MatX8u)
  return target;
}

int MatX8u::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.MatX8u)
  int total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // repeated int32 data = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatX8u::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.MatX8u)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MatX8u* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatX8u>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.MatX8u)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.MatX8u)
    MergeFrom(*source);
  }
}

void MatX8u::MergeFrom(const MatX8u& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.MatX8u)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void MatX8u::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.MatX8u)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatX8u::CopyFrom(const MatX8u& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.MatX8u)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatX8u::IsInitialized() const {

  return true;
}

void MatX8u::Swap(MatX8u* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatX8u::InternalSwap(MatX8u* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatX8u::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatX8u_descriptor_;
  metadata.reflection = MatX8u_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatX8u

// optional int32 rows = 1;
void MatX8u::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 MatX8u::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatX8u.rows)
  return rows_;
}
 void MatX8u::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatX8u.rows)
}

// optional int32 cols = 2;
void MatX8u::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 MatX8u::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatX8u.cols)
  return cols_;
}
 void MatX8u::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatX8u.cols)
}

// repeated int32 data = 3;
int MatX8u::data_size() const {
  return data_.size();
}
void MatX8u::clear_data() {
  data_.Clear();
}
 ::google::protobuf::int32 MatX8u::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatX8u.data)
  return data_.Get(index);
}
 void MatX8u::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatX8u.data)
}
 void MatX8u::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatX8u.data)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MatX8u::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatX8u.data)
  return data_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MatX8u::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatX8u.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatXd::kRowsFieldNumber;
const int MatXd::kColsFieldNumber;
const int MatXd::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatXd::MatXd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.MatXd)
}

void MatXd::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatXd::MatXd(const MatXd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.MatXd)
}

void MatXd::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
}

MatXd::~MatXd() {
  // @@protoc_insertion_point(destructor:megslam.proto.MatXd)
  SharedDtor();
}

void MatXd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatXd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatXd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatXd_descriptor_;
}

const MatXd& MatXd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

MatXd* MatXd::default_instance_ = NULL;

MatXd* MatXd::New(::google::protobuf::Arena* arena) const {
  MatXd* n = new MatXd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatXd::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.MatXd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatXd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatXd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool MatXd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.MatXd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.MatXd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.MatXd)
  return false;
#undef DO_
}

void MatXd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.MatXd)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated double data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.MatXd)
}

::google::protobuf::uint8* MatXd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.MatXd)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated double data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.MatXd)
  return target;
}

int MatXd::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.MatXd)
  int total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatXd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.MatXd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MatXd* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatXd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.MatXd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.MatXd)
    MergeFrom(*source);
  }
}

void MatXd::MergeFrom(const MatXd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.MatXd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void MatXd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.MatXd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatXd::CopyFrom(const MatXd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.MatXd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatXd::IsInitialized() const {

  return true;
}

void MatXd::Swap(MatXd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatXd::InternalSwap(MatXd* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatXd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatXd_descriptor_;
  metadata.reflection = MatXd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatXd

// optional int32 rows = 1;
void MatXd::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 MatXd::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXd.rows)
  return rows_;
}
 void MatXd::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXd.rows)
}

// optional int32 cols = 2;
void MatXd::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 MatXd::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXd.cols)
  return cols_;
}
 void MatXd::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXd.cols)
}

// repeated double data = 3;
int MatXd::data_size() const {
  return data_.size();
}
void MatXd::clear_data() {
  data_.Clear();
}
 double MatXd::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXd.data)
  return data_.Get(index);
}
 void MatXd::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatXd.data)
}
 void MatXd::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatXd.data)
}
 const ::google::protobuf::RepeatedField< double >&
MatXd::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatXd.data)
  return data_;
}
 ::google::protobuf::RepeatedField< double >*
MatXd::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatXd.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatXf::kRowsFieldNumber;
const int MatXf::kColsFieldNumber;
const int MatXf::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatXf::MatXf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.MatXf)
}

void MatXf::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MatXf::MatXf(const MatXf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.MatXf)
}

void MatXf::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rows_ = 0;
  cols_ = 0;
}

MatXf::~MatXf() {
  // @@protoc_insertion_point(destructor:megslam.proto.MatXf)
  SharedDtor();
}

void MatXf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatXf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatXf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatXf_descriptor_;
}

const MatXf& MatXf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

MatXf* MatXf::default_instance_ = NULL;

MatXf* MatXf::New(::google::protobuf::Arena* arena) const {
  MatXf* n = new MatXf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatXf::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.MatXf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MatXf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MatXf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(rows_, cols_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool MatXf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.MatXf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rows = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // optional int32 cols = 2;
      case 2: {
        if (tag == 16) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated float data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_data())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.MatXf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.MatXf)
  return false;
#undef DO_
}

void MatXf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.MatXf)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rows(), output);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cols(), output);
  }

  // repeated float data = 3;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.MatXf)
}

::google::protobuf::uint8* MatXf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.MatXf)
  // optional int32 rows = 1;
  if (this->rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rows(), target);
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cols(), target);
  }

  // repeated float data = 3;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->data(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.MatXf)
  return target;
}

int MatXf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.MatXf)
  int total_size = 0;

  // optional int32 rows = 1;
  if (this->rows() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rows());
  }

  // optional int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cols());
  }

  // repeated float data = 3;
  {
    int data_size = 0;
    data_size = 4 * this->data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatXf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.MatXf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MatXf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MatXf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.MatXf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.MatXf)
    MergeFrom(*source);
  }
}

void MatXf::MergeFrom(const MatXf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.MatXf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from.rows() != 0) {
    set_rows(from.rows());
  }
  if (from.cols() != 0) {
    set_cols(from.cols());
  }
}

void MatXf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.MatXf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatXf::CopyFrom(const MatXf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.MatXf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatXf::IsInitialized() const {

  return true;
}

void MatXf::Swap(MatXf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatXf::InternalSwap(MatXf* other) {
  std::swap(rows_, other->rows_);
  std::swap(cols_, other->cols_);
  data_.UnsafeArenaSwap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MatXf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatXf_descriptor_;
  metadata.reflection = MatXf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatXf

// optional int32 rows = 1;
void MatXf::clear_rows() {
  rows_ = 0;
}
 ::google::protobuf::int32 MatXf::rows() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXf.rows)
  return rows_;
}
 void MatXf::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXf.rows)
}

// optional int32 cols = 2;
void MatXf::clear_cols() {
  cols_ = 0;
}
 ::google::protobuf::int32 MatXf::cols() const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXf.cols)
  return cols_;
}
 void MatXf::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.MatXf.cols)
}

// repeated float data = 3;
int MatXf::data_size() const {
  return data_.size();
}
void MatXf::clear_data() {
  data_.Clear();
}
 float MatXf::data(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.MatXf.data)
  return data_.Get(index);
}
 void MatXf::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.MatXf.data)
}
 void MatXf::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.MatXf.data)
}
 const ::google::protobuf::RepeatedField< float >&
MatXf::data() const {
  // @@protoc_insertion_point(field_list:megslam.proto.MatXf.data)
  return data_;
}
 ::google::protobuf::RepeatedField< float >*
MatXf::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.MatXf.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyFrame::kIdFieldNumber;
const int KeyFrame::kTcwFieldNumber;
const int KeyFrame::kKeyPointsFieldNumber;
const int KeyFrame::kLocalDescriptorsFieldNumber;
const int KeyFrame::kMapPointsFieldNumber;
const int KeyFrame::kGlobalDescriptorFieldNumber;
const int KeyFrame::kEncodedLocalDescriptorsFieldNumber;
const int KeyFrame::kMapPointIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyFrame::KeyFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.KeyFrame)
}

void KeyFrame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  tcw_ = const_cast< ::megslam::proto::MatXd*>(&::megslam::proto::MatXd::default_instance());
  local_descriptors_ = const_cast< ::megslam::proto::MatXf*>(&::megslam::proto::MatXf::default_instance());
  global_descriptor_ = const_cast< ::megslam::proto::MatXf*>(&::megslam::proto::MatXf::default_instance());
  encoded_local_descriptors_ = const_cast< ::megslam::proto::MatXi*>(&::megslam::proto::MatXi::default_instance());
}

KeyFrame::KeyFrame(const KeyFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.KeyFrame)
}

void KeyFrame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  tcw_ = NULL;
  local_descriptors_ = NULL;
  global_descriptor_ = NULL;
  encoded_local_descriptors_ = NULL;
}

KeyFrame::~KeyFrame() {
  // @@protoc_insertion_point(destructor:megslam.proto.KeyFrame)
  SharedDtor();
}

void KeyFrame::SharedDtor() {
  if (this != default_instance_) {
    delete tcw_;
    delete local_descriptors_;
    delete global_descriptor_;
    delete encoded_local_descriptors_;
  }
}

void KeyFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyFrame_descriptor_;
}

const KeyFrame& KeyFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

KeyFrame* KeyFrame::default_instance_ = NULL;

KeyFrame* KeyFrame::New(::google::protobuf::Arena* arena) const {
  KeyFrame* n = new KeyFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.KeyFrame)
  id_ = 0;
  if (GetArenaNoVirtual() == NULL && tcw_ != NULL) delete tcw_;
  tcw_ = NULL;
  if (GetArenaNoVirtual() == NULL && local_descriptors_ != NULL) delete local_descriptors_;
  local_descriptors_ = NULL;
  if (GetArenaNoVirtual() == NULL && global_descriptor_ != NULL) delete global_descriptor_;
  global_descriptor_ = NULL;
  if (GetArenaNoVirtual() == NULL && encoded_local_descriptors_ != NULL) delete encoded_local_descriptors_;
  encoded_local_descriptors_ = NULL;
  key_points_.Clear();
  map_points_.Clear();
  map_point_ids_.Clear();
}

bool KeyFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.KeyFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Tcw;
        break;
      }

      // optional .megslam.proto.MatXd Tcw = 2;
      case 2: {
        if (tag == 18) {
         parse_Tcw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key_points;
        break;
      }

      // repeated .megslam.proto.Point2f key_points = 3;
      case 3: {
        if (tag == 26) {
         parse_key_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_key_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_key_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_key_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_local_descriptors;
        break;
      }

      // optional .megslam.proto.MatXf local_descriptors = 4;
      case 4: {
        if (tag == 34) {
         parse_local_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_descriptors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map_points;
        break;
      }

      // repeated .megslam.proto.Point3f map_points = 5;
      case 5: {
        if (tag == 42) {
         parse_map_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_map_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(50)) goto parse_global_descriptor;
        break;
      }

      // optional .megslam.proto.MatXf global_descriptor = 6;
      case 6: {
        if (tag == 50) {
         parse_global_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_descriptor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_encoded_local_descriptors;
        break;
      }

      // optional .megslam.proto.MatXi encoded_local_descriptors = 7;
      case 7: {
        if (tag == 58) {
         parse_encoded_local_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encoded_local_descriptors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_map_point_ids;
        break;
      }

      // repeated int32 map_point_ids = 8;
      case 8: {
        if (tag == 66) {
         parse_map_point_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_map_point_ids())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66, input, this->mutable_map_point_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.KeyFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.KeyFrame)
  return false;
#undef DO_
}

void KeyFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.KeyFrame)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .megslam.proto.MatXd Tcw = 2;
  if (this->has_tcw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tcw_, output);
  }

  // repeated .megslam.proto.Point2f key_points = 3;
  for (unsigned int i = 0, n = this->key_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->key_points(i), output);
  }

  // optional .megslam.proto.MatXf local_descriptors = 4;
  if (this->has_local_descriptors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->local_descriptors_, output);
  }

  // repeated .megslam.proto.Point3f map_points = 5;
  for (unsigned int i = 0, n = this->map_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->map_points(i), output);
  }

  // optional .megslam.proto.MatXf global_descriptor = 6;
  if (this->has_global_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->global_descriptor_, output);
  }

  // optional .megslam.proto.MatXi encoded_local_descriptors = 7;
  if (this->has_encoded_local_descriptors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->encoded_local_descriptors_, output);
  }

  // repeated int32 map_point_ids = 8;
  if (this->map_point_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_map_point_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->map_point_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->map_point_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.KeyFrame)
}

::google::protobuf::uint8* KeyFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.KeyFrame)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .megslam.proto.MatXd Tcw = 2;
  if (this->has_tcw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tcw_, false, target);
  }

  // repeated .megslam.proto.Point2f key_points = 3;
  for (unsigned int i = 0, n = this->key_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->key_points(i), false, target);
  }

  // optional .megslam.proto.MatXf local_descriptors = 4;
  if (this->has_local_descriptors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->local_descriptors_, false, target);
  }

  // repeated .megslam.proto.Point3f map_points = 5;
  for (unsigned int i = 0, n = this->map_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->map_points(i), false, target);
  }

  // optional .megslam.proto.MatXf global_descriptor = 6;
  if (this->has_global_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->global_descriptor_, false, target);
  }

  // optional .megslam.proto.MatXi encoded_local_descriptors = 7;
  if (this->has_encoded_local_descriptors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->encoded_local_descriptors_, false, target);
  }

  // repeated int32 map_point_ids = 8;
  if (this->map_point_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _map_point_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->map_point_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->map_point_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.KeyFrame)
  return target;
}

int KeyFrame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.KeyFrame)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional .megslam.proto.MatXd Tcw = 2;
  if (this->has_tcw()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tcw_);
  }

  // optional .megslam.proto.MatXf local_descriptors = 4;
  if (this->has_local_descriptors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_descriptors_);
  }

  // optional .megslam.proto.MatXf global_descriptor = 6;
  if (this->has_global_descriptor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->global_descriptor_);
  }

  // optional .megslam.proto.MatXi encoded_local_descriptors = 7;
  if (this->has_encoded_local_descriptors()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encoded_local_descriptors_);
  }

  // repeated .megslam.proto.Point2f key_points = 3;
  total_size += 1 * this->key_points_size();
  for (int i = 0; i < this->key_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key_points(i));
  }

  // repeated .megslam.proto.Point3f map_points = 5;
  total_size += 1 * this->map_points_size();
  for (int i = 0; i < this->map_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_points(i));
  }

  // repeated int32 map_point_ids = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_point_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->map_point_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _map_point_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.KeyFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KeyFrame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.KeyFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.KeyFrame)
    MergeFrom(*source);
  }
}

void KeyFrame::MergeFrom(const KeyFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.KeyFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  key_points_.MergeFrom(from.key_points_);
  map_points_.MergeFrom(from.map_points_);
  map_point_ids_.MergeFrom(from.map_point_ids_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.has_tcw()) {
    mutable_tcw()->::megslam::proto::MatXd::MergeFrom(from.tcw());
  }
  if (from.has_local_descriptors()) {
    mutable_local_descriptors()->::megslam::proto::MatXf::MergeFrom(from.local_descriptors());
  }
  if (from.has_global_descriptor()) {
    mutable_global_descriptor()->::megslam::proto::MatXf::MergeFrom(from.global_descriptor());
  }
  if (from.has_encoded_local_descriptors()) {
    mutable_encoded_local_descriptors()->::megslam::proto::MatXi::MergeFrom(from.encoded_local_descriptors());
  }
}

void KeyFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.KeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyFrame::CopyFrom(const KeyFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.KeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyFrame::IsInitialized() const {

  return true;
}

void KeyFrame::Swap(KeyFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyFrame::InternalSwap(KeyFrame* other) {
  std::swap(id_, other->id_);
  std::swap(tcw_, other->tcw_);
  key_points_.UnsafeArenaSwap(&other->key_points_);
  std::swap(local_descriptors_, other->local_descriptors_);
  map_points_.UnsafeArenaSwap(&other->map_points_);
  std::swap(global_descriptor_, other->global_descriptor_);
  std::swap(encoded_local_descriptors_, other->encoded_local_descriptors_);
  map_point_ids_.UnsafeArenaSwap(&other->map_point_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyFrame_descriptor_;
  metadata.reflection = KeyFrame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyFrame

// optional int32 id = 1;
void KeyFrame::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 KeyFrame::id() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.id)
  return id_;
}
 void KeyFrame::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:megslam.proto.KeyFrame.id)
}

// optional .megslam.proto.MatXd Tcw = 2;
bool KeyFrame::has_tcw() const {
  return !_is_default_instance_ && tcw_ != NULL;
}
void KeyFrame::clear_tcw() {
  if (GetArenaNoVirtual() == NULL && tcw_ != NULL) delete tcw_;
  tcw_ = NULL;
}
const ::megslam::proto::MatXd& KeyFrame::tcw() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.Tcw)
  return tcw_ != NULL ? *tcw_ : *default_instance_->tcw_;
}
::megslam::proto::MatXd* KeyFrame::mutable_tcw() {
  
  if (tcw_ == NULL) {
    tcw_ = new ::megslam::proto::MatXd;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.Tcw)
  return tcw_;
}
::megslam::proto::MatXd* KeyFrame::release_tcw() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.Tcw)
  
  ::megslam::proto::MatXd* temp = tcw_;
  tcw_ = NULL;
  return temp;
}
void KeyFrame::set_allocated_tcw(::megslam::proto::MatXd* tcw) {
  delete tcw_;
  tcw_ = tcw;
  if (tcw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.Tcw)
}

// repeated .megslam.proto.Point2f key_points = 3;
int KeyFrame::key_points_size() const {
  return key_points_.size();
}
void KeyFrame::clear_key_points() {
  key_points_.Clear();
}
const ::megslam::proto::Point2f& KeyFrame::key_points(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.key_points)
  return key_points_.Get(index);
}
::megslam::proto::Point2f* KeyFrame::mutable_key_points(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.key_points)
  return key_points_.Mutable(index);
}
::megslam::proto::Point2f* KeyFrame::add_key_points() {
  // @@protoc_insertion_point(field_add:megslam.proto.KeyFrame.key_points)
  return key_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f >*
KeyFrame::mutable_key_points() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.KeyFrame.key_points)
  return &key_points_;
}
const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point2f >&
KeyFrame::key_points() const {
  // @@protoc_insertion_point(field_list:megslam.proto.KeyFrame.key_points)
  return key_points_;
}

// optional .megslam.proto.MatXf local_descriptors = 4;
bool KeyFrame::has_local_descriptors() const {
  return !_is_default_instance_ && local_descriptors_ != NULL;
}
void KeyFrame::clear_local_descriptors() {
  if (GetArenaNoVirtual() == NULL && local_descriptors_ != NULL) delete local_descriptors_;
  local_descriptors_ = NULL;
}
const ::megslam::proto::MatXf& KeyFrame::local_descriptors() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.local_descriptors)
  return local_descriptors_ != NULL ? *local_descriptors_ : *default_instance_->local_descriptors_;
}
::megslam::proto::MatXf* KeyFrame::mutable_local_descriptors() {
  
  if (local_descriptors_ == NULL) {
    local_descriptors_ = new ::megslam::proto::MatXf;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.local_descriptors)
  return local_descriptors_;
}
::megslam::proto::MatXf* KeyFrame::release_local_descriptors() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.local_descriptors)
  
  ::megslam::proto::MatXf* temp = local_descriptors_;
  local_descriptors_ = NULL;
  return temp;
}
void KeyFrame::set_allocated_local_descriptors(::megslam::proto::MatXf* local_descriptors) {
  delete local_descriptors_;
  local_descriptors_ = local_descriptors;
  if (local_descriptors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.local_descriptors)
}

// repeated .megslam.proto.Point3f map_points = 5;
int KeyFrame::map_points_size() const {
  return map_points_.size();
}
void KeyFrame::clear_map_points() {
  map_points_.Clear();
}
const ::megslam::proto::Point3f& KeyFrame::map_points(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.map_points)
  return map_points_.Get(index);
}
::megslam::proto::Point3f* KeyFrame::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.map_points)
  return map_points_.Mutable(index);
}
::megslam::proto::Point3f* KeyFrame::add_map_points() {
  // @@protoc_insertion_point(field_add:megslam.proto.KeyFrame.map_points)
  return map_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >*
KeyFrame::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.KeyFrame.map_points)
  return &map_points_;
}
const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >&
KeyFrame::map_points() const {
  // @@protoc_insertion_point(field_list:megslam.proto.KeyFrame.map_points)
  return map_points_;
}

// optional .megslam.proto.MatXf global_descriptor = 6;
bool KeyFrame::has_global_descriptor() const {
  return !_is_default_instance_ && global_descriptor_ != NULL;
}
void KeyFrame::clear_global_descriptor() {
  if (GetArenaNoVirtual() == NULL && global_descriptor_ != NULL) delete global_descriptor_;
  global_descriptor_ = NULL;
}
const ::megslam::proto::MatXf& KeyFrame::global_descriptor() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.global_descriptor)
  return global_descriptor_ != NULL ? *global_descriptor_ : *default_instance_->global_descriptor_;
}
::megslam::proto::MatXf* KeyFrame::mutable_global_descriptor() {
  
  if (global_descriptor_ == NULL) {
    global_descriptor_ = new ::megslam::proto::MatXf;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.global_descriptor)
  return global_descriptor_;
}
::megslam::proto::MatXf* KeyFrame::release_global_descriptor() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.global_descriptor)
  
  ::megslam::proto::MatXf* temp = global_descriptor_;
  global_descriptor_ = NULL;
  return temp;
}
void KeyFrame::set_allocated_global_descriptor(::megslam::proto::MatXf* global_descriptor) {
  delete global_descriptor_;
  global_descriptor_ = global_descriptor;
  if (global_descriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.global_descriptor)
}

// optional .megslam.proto.MatXi encoded_local_descriptors = 7;
bool KeyFrame::has_encoded_local_descriptors() const {
  return !_is_default_instance_ && encoded_local_descriptors_ != NULL;
}
void KeyFrame::clear_encoded_local_descriptors() {
  if (GetArenaNoVirtual() == NULL && encoded_local_descriptors_ != NULL) delete encoded_local_descriptors_;
  encoded_local_descriptors_ = NULL;
}
const ::megslam::proto::MatXi& KeyFrame::encoded_local_descriptors() const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.encoded_local_descriptors)
  return encoded_local_descriptors_ != NULL ? *encoded_local_descriptors_ : *default_instance_->encoded_local_descriptors_;
}
::megslam::proto::MatXi* KeyFrame::mutable_encoded_local_descriptors() {
  
  if (encoded_local_descriptors_ == NULL) {
    encoded_local_descriptors_ = new ::megslam::proto::MatXi;
  }
  // @@protoc_insertion_point(field_mutable:megslam.proto.KeyFrame.encoded_local_descriptors)
  return encoded_local_descriptors_;
}
::megslam::proto::MatXi* KeyFrame::release_encoded_local_descriptors() {
  // @@protoc_insertion_point(field_release:megslam.proto.KeyFrame.encoded_local_descriptors)
  
  ::megslam::proto::MatXi* temp = encoded_local_descriptors_;
  encoded_local_descriptors_ = NULL;
  return temp;
}
void KeyFrame::set_allocated_encoded_local_descriptors(::megslam::proto::MatXi* encoded_local_descriptors) {
  delete encoded_local_descriptors_;
  encoded_local_descriptors_ = encoded_local_descriptors;
  if (encoded_local_descriptors) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:megslam.proto.KeyFrame.encoded_local_descriptors)
}

// repeated int32 map_point_ids = 8;
int KeyFrame::map_point_ids_size() const {
  return map_point_ids_.size();
}
void KeyFrame::clear_map_point_ids() {
  map_point_ids_.Clear();
}
 ::google::protobuf::int32 KeyFrame::map_point_ids(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.KeyFrame.map_point_ids)
  return map_point_ids_.Get(index);
}
 void KeyFrame::set_map_point_ids(int index, ::google::protobuf::int32 value) {
  map_point_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.KeyFrame.map_point_ids)
}
 void KeyFrame::add_map_point_ids(::google::protobuf::int32 value) {
  map_point_ids_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.KeyFrame.map_point_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KeyFrame::map_point_ids() const {
  // @@protoc_insertion_point(field_list:megslam.proto.KeyFrame.map_point_ids)
  return map_point_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KeyFrame::mutable_map_point_ids() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.KeyFrame.map_point_ids)
  return &map_point_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Database::kKeyframesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Database::Database()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.Database)
}

void Database::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Database::Database(const Database& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.Database)
}

void Database::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Database::~Database() {
  // @@protoc_insertion_point(destructor:megslam.proto.Database)
  SharedDtor();
}

void Database::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Database::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Database::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Database_descriptor_;
}

const Database& Database::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

Database* Database::default_instance_ = NULL;

Database* Database::New(::google::protobuf::Arena* arena) const {
  Database* n = new Database;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Database::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.Database)
  keyframes_.Clear();
}

bool Database::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.Database)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .megslam.proto.KeyFrame keyframes = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_keyframes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_keyframes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_keyframes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.Database)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.Database)
  return false;
#undef DO_
}

void Database::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.Database)
  // repeated .megslam.proto.KeyFrame keyframes = 1;
  for (unsigned int i = 0, n = this->keyframes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keyframes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.Database)
}

::google::protobuf::uint8* Database::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.Database)
  // repeated .megslam.proto.KeyFrame keyframes = 1;
  for (unsigned int i = 0, n = this->keyframes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->keyframes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.Database)
  return target;
}

int Database::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.Database)
  int total_size = 0;

  // repeated .megslam.proto.KeyFrame keyframes = 1;
  total_size += 1 * this->keyframes_size();
  for (int i = 0; i < this->keyframes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyframes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Database::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.Database)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Database* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Database>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.Database)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.Database)
    MergeFrom(*source);
  }
}

void Database::MergeFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.Database)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  keyframes_.MergeFrom(from.keyframes_);
}

void Database::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database::CopyFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {

  return true;
}

void Database::Swap(Database* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Database::InternalSwap(Database* other) {
  keyframes_.UnsafeArenaSwap(&other->keyframes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Database::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Database_descriptor_;
  metadata.reflection = Database_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Database

// repeated .megslam.proto.KeyFrame keyframes = 1;
int Database::keyframes_size() const {
  return keyframes_.size();
}
void Database::clear_keyframes() {
  keyframes_.Clear();
}
const ::megslam::proto::KeyFrame& Database::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.Database.keyframes)
  return keyframes_.Get(index);
}
::megslam::proto::KeyFrame* Database::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.Database.keyframes)
  return keyframes_.Mutable(index);
}
::megslam::proto::KeyFrame* Database::add_keyframes() {
  // @@protoc_insertion_point(field_add:megslam.proto.Database.keyframes)
  return keyframes_.Add();
}
::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame >*
Database::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.Database.keyframes)
  return &keyframes_;
}
const ::google::protobuf::RepeatedPtrField< ::megslam::proto::KeyFrame >&
Database::keyframes() const {
  // @@protoc_insertion_point(field_list:megslam.proto.Database.keyframes)
  return keyframes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloud::kMapPointsFieldNumber;
const int PointCloud::kDescriptorsFieldNumber;
const int PointCloud::kReprojectionErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloud::PointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:megslam.proto.PointCloud)
}

void PointCloud::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:megslam.proto.PointCloud)
}

void PointCloud::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:megslam.proto.PointCloud)
  SharedDtor();
}

void PointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloud_descriptor_;
}

const PointCloud& PointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_megslam_5fproto_5fkeyframe_2eproto();
  return *default_instance_;
}

PointCloud* PointCloud::default_instance_ = NULL;

PointCloud* PointCloud::New(::google::protobuf::Arena* arena) const {
  PointCloud* n = new PointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:megslam.proto.PointCloud)
  map_points_.Clear();
  descriptors_.Clear();
  reprojection_errors_.Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:megslam.proto.PointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .megslam.proto.Point3f map_points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_map_points;
        if (input->ExpectTag(18)) goto parse_loop_descriptors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .megslam.proto.MatXf descriptors = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_descriptors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_descriptors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_descriptors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_reprojection_errors;
        break;
      }

      // repeated float reprojection_errors = 3;
      case 3: {
        if (tag == 26) {
         parse_reprojection_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_reprojection_errors())));
        } else if (tag == 29) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_reprojection_errors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:megslam.proto.PointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:megslam.proto.PointCloud)
  return false;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:megslam.proto.PointCloud)
  // repeated .megslam.proto.Point3f map_points = 1;
  for (unsigned int i = 0, n = this->map_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_points(i), output);
  }

  // repeated .megslam.proto.MatXf descriptors = 2;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptors(i), output);
  }

  // repeated float reprojection_errors = 3;
  if (this->reprojection_errors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reprojection_errors_cached_byte_size_);
  }
  for (int i = 0; i < this->reprojection_errors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->reprojection_errors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:megslam.proto.PointCloud)
}

::google::protobuf::uint8* PointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:megslam.proto.PointCloud)
  // repeated .megslam.proto.Point3f map_points = 1;
  for (unsigned int i = 0, n = this->map_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->map_points(i), false, target);
  }

  // repeated .megslam.proto.MatXf descriptors = 2;
  for (unsigned int i = 0, n = this->descriptors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->descriptors(i), false, target);
  }

  // repeated float reprojection_errors = 3;
  if (this->reprojection_errors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _reprojection_errors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->reprojection_errors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->reprojection_errors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:megslam.proto.PointCloud)
  return target;
}

int PointCloud::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:megslam.proto.PointCloud)
  int total_size = 0;

  // repeated .megslam.proto.Point3f map_points = 1;
  total_size += 1 * this->map_points_size();
  for (int i = 0; i < this->map_points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_points(i));
  }

  // repeated .megslam.proto.MatXf descriptors = 2;
  total_size += 1 * this->descriptors_size();
  for (int i = 0; i < this->descriptors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->descriptors(i));
  }

  // repeated float reprojection_errors = 3;
  {
    int data_size = 0;
    data_size = 4 * this->reprojection_errors_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reprojection_errors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megslam.proto.PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointCloud* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megslam.proto.PointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megslam.proto.PointCloud)
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megslam.proto.PointCloud)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  map_points_.MergeFrom(from.map_points_);
  descriptors_.MergeFrom(from.descriptors_);
  reprojection_errors_.MergeFrom(from.reprojection_errors_);
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megslam.proto.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megslam.proto.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {

  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloud::InternalSwap(PointCloud* other) {
  map_points_.UnsafeArenaSwap(&other->map_points_);
  descriptors_.UnsafeArenaSwap(&other->descriptors_);
  reprojection_errors_.UnsafeArenaSwap(&other->reprojection_errors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloud_descriptor_;
  metadata.reflection = PointCloud_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloud

// repeated .megslam.proto.Point3f map_points = 1;
int PointCloud::map_points_size() const {
  return map_points_.size();
}
void PointCloud::clear_map_points() {
  map_points_.Clear();
}
const ::megslam::proto::Point3f& PointCloud::map_points(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.PointCloud.map_points)
  return map_points_.Get(index);
}
::megslam::proto::Point3f* PointCloud::mutable_map_points(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.PointCloud.map_points)
  return map_points_.Mutable(index);
}
::megslam::proto::Point3f* PointCloud::add_map_points() {
  // @@protoc_insertion_point(field_add:megslam.proto.PointCloud.map_points)
  return map_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >*
PointCloud::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.PointCloud.map_points)
  return &map_points_;
}
const ::google::protobuf::RepeatedPtrField< ::megslam::proto::Point3f >&
PointCloud::map_points() const {
  // @@protoc_insertion_point(field_list:megslam.proto.PointCloud.map_points)
  return map_points_;
}

// repeated .megslam.proto.MatXf descriptors = 2;
int PointCloud::descriptors_size() const {
  return descriptors_.size();
}
void PointCloud::clear_descriptors() {
  descriptors_.Clear();
}
const ::megslam::proto::MatXf& PointCloud::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.PointCloud.descriptors)
  return descriptors_.Get(index);
}
::megslam::proto::MatXf* PointCloud::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:megslam.proto.PointCloud.descriptors)
  return descriptors_.Mutable(index);
}
::megslam::proto::MatXf* PointCloud::add_descriptors() {
  // @@protoc_insertion_point(field_add:megslam.proto.PointCloud.descriptors)
  return descriptors_.Add();
}
::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf >*
PointCloud::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.PointCloud.descriptors)
  return &descriptors_;
}
const ::google::protobuf::RepeatedPtrField< ::megslam::proto::MatXf >&
PointCloud::descriptors() const {
  // @@protoc_insertion_point(field_list:megslam.proto.PointCloud.descriptors)
  return descriptors_;
}

// repeated float reprojection_errors = 3;
int PointCloud::reprojection_errors_size() const {
  return reprojection_errors_.size();
}
void PointCloud::clear_reprojection_errors() {
  reprojection_errors_.Clear();
}
 float PointCloud::reprojection_errors(int index) const {
  // @@protoc_insertion_point(field_get:megslam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_.Get(index);
}
 void PointCloud::set_reprojection_errors(int index, float value) {
  reprojection_errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:megslam.proto.PointCloud.reprojection_errors)
}
 void PointCloud::add_reprojection_errors(float value) {
  reprojection_errors_.Add(value);
  // @@protoc_insertion_point(field_add:megslam.proto.PointCloud.reprojection_errors)
}
 const ::google::protobuf::RepeatedField< float >&
PointCloud::reprojection_errors() const {
  // @@protoc_insertion_point(field_list:megslam.proto.PointCloud.reprojection_errors)
  return reprojection_errors_;
}
 ::google::protobuf::RepeatedField< float >*
PointCloud::mutable_reprojection_errors() {
  // @@protoc_insertion_point(field_mutable_list:megslam.proto.PointCloud.reprojection_errors)
  return &reprojection_errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace megslam

// @@protoc_insertion_point(global_scope)
