// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FEATURE_PICO_MR_FLAT_H_
#define FLATBUFFERS_GENERATED_FEATURE_PICO_MR_FLAT_H_

#include "flatbuffers/flatbuffers.h"

#include "keyframe_generated.h"

namespace pico_MR {
namespace flat {

struct FeatureBundle;
struct FeatureBundleBuilder;

struct FeatureBundle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FeatureBundleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IMAGE_ID = 4,
    VT_FEATURE_START = 6,
    VT_FEATURE_LENGTH = 8,
    VT_FEATURE_DATA = 10
  };
  const flatbuffers::Vector<uint32_t>* image_id() const {
    return GetPointer<const flatbuffers::Vector<uint32_t>*>(VT_IMAGE_ID);
  }
  const flatbuffers::Vector<uint32_t>* feature_start() const {
    return GetPointer<const flatbuffers::Vector<uint32_t>*>(VT_FEATURE_START);
  }
  const flatbuffers::Vector<uint32_t>* feature_length() const {
    return GetPointer<const flatbuffers::Vector<uint32_t>*>(VT_FEATURE_LENGTH);
  }
  const flatbuffers::Vector<uint8_t>* feature_data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t>*>(VT_FEATURE_DATA);
  }
  bool Verify(flatbuffers::Verifier& verifier) const {
    return VerifyTableStart(verifier) && VerifyOffset(verifier, VT_IMAGE_ID) &&
           verifier.VerifyVector(image_id()) && VerifyOffset(verifier, VT_FEATURE_START) &&
           verifier.VerifyVector(feature_start()) && VerifyOffset(verifier, VT_FEATURE_LENGTH) &&
           verifier.VerifyVector(feature_length()) && VerifyOffset(verifier, VT_FEATURE_DATA) &&
           verifier.VerifyVector(feature_data()) && verifier.EndTable();
  }
};

struct FeatureBundleBuilder {
  typedef FeatureBundle Table;
  flatbuffers::FlatBufferBuilder& fbb_;
  flatbuffers::uoffset_t start_;
  void add_image_id(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> image_id) {
    fbb_.AddOffset(FeatureBundle::VT_IMAGE_ID, image_id);
  }
  void add_feature_start(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> feature_start) {
    fbb_.AddOffset(FeatureBundle::VT_FEATURE_START, feature_start);
  }
  void add_feature_length(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> feature_length) {
    fbb_.AddOffset(FeatureBundle::VT_FEATURE_LENGTH, feature_length);
  }
  void add_feature_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> feature_data) {
    fbb_.AddOffset(FeatureBundle::VT_FEATURE_DATA, feature_data);
  }
  explicit FeatureBundleBuilder(flatbuffers::FlatBufferBuilder& _fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FeatureBundle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FeatureBundle>(end);
    return o;
  }
};

inline flatbuffers::Offset<FeatureBundle> CreateFeatureBundle(
    flatbuffers::FlatBufferBuilder& _fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> image_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> feature_start = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> feature_length = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> feature_data = 0) {
  FeatureBundleBuilder builder_(_fbb);
  builder_.add_feature_data(feature_data);
  builder_.add_feature_length(feature_length);
  builder_.add_feature_start(feature_start);
  builder_.add_image_id(image_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<FeatureBundle> CreateFeatureBundleDirect(
    flatbuffers::FlatBufferBuilder& _fbb, const std::vector<uint32_t>* image_id = nullptr,
    const std::vector<uint32_t>* feature_start = nullptr,
    const std::vector<uint32_t>* feature_length = nullptr,
    const std::vector<uint8_t>* feature_data = nullptr) {
  auto image_id__ = image_id ? _fbb.CreateVector<uint32_t>(*image_id) : 0;
  auto feature_start__ = feature_start ? _fbb.CreateVector<uint32_t>(*feature_start) : 0;
  auto feature_length__ = feature_length ? _fbb.CreateVector<uint32_t>(*feature_length) : 0;
  auto feature_data__ = feature_data ? _fbb.CreateVector<uint8_t>(*feature_data) : 0;
  return pico_MR::flat::CreateFeatureBundle(_fbb, image_id__, feature_start__, feature_length__,
                                            feature_data__);
}

inline const pico_MR::flat::FeatureBundle* GetFeatureBundle(const void* buf) {
  return flatbuffers::GetRoot<pico_MR::flat::FeatureBundle>(buf);
}

inline const pico_MR::flat::FeatureBundle* GetSizePrefixedFeatureBundle(const void* buf) {
  return flatbuffers::GetSizePrefixedRoot<pico_MR::flat::FeatureBundle>(buf);
}

inline bool VerifyFeatureBundleBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifyBuffer<pico_MR::flat::FeatureBundle>(nullptr);
}

inline bool VerifySizePrefixedFeatureBundleBuffer(flatbuffers::Verifier& verifier) {
  return verifier.VerifySizePrefixedBuffer<pico_MR::flat::FeatureBundle>(nullptr);
}

inline void FinishFeatureBundleBuffer(flatbuffers::FlatBufferBuilder& fbb,
                                      flatbuffers::Offset<pico_MR::flat::FeatureBundle> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFeatureBundleBuffer(
    flatbuffers::FlatBufferBuilder& fbb, flatbuffers::Offset<pico_MR::flat::FeatureBundle> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat
}  // namespace pico_MR

#endif  // FLATBUFFERS_GENERATED_FEATURE_PICO_MR_FLAT_H_
